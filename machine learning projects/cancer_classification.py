# -*- coding: utf-8 -*-
"""Cancer Classification.ipynb

Automatically generated by Colaboratory.

Using a neural network I used data from the Breast Cancer Winsconsin (Diagnostic) Dataset to classify tumors as malignant or 
benign based on their radius, texture, perimeter area, smoothness, compactness, concavity, concave points, symmetry and 
fractal dimension. Each of these features has corresponding mean, standard error and "worst" (mean of the largest 3 values) 
column on the data set resulting in a total of 32 attributes.

Initially I attempted to remove highly correlated features (e.g. perimeter and radius) but after playing around with the dataset 
I realised that I got the best results by inputting the entire dataset into my network.

Dataset can be found here: http://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Diagnostic%29
"""

from sklearn import datasets, preprocessing, model_selection
import pandas as pd
from keras import models, layers
from keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt

cancer = datasets.load_breast_cancer()
cancer_df = pd.DataFrame(cancer.data, columns = cancer.feature_names)

norm_cancer_df = preprocessing.normalize(cancer_df)

cancer_labels = preprocessing.LabelEncoder().fit_transform(cancer.target)

x_train, x_test, y_train, y_test = model_selection.train_test_split(norm_cancer_df, cancer.target, shuffle=True)

model = models.Sequential()

model.add(layers.Dense(512, activation="relu", input_shape=(30, )))
model.add(layers.Dense(1, activation="sigmoid"))

early_stopping = EarlyStopping(patience=3)

model.compile(optimizer="rmsprop", loss="binary_crossentropy", metrics=["acc"])
history = model.fit(x_train, y_train, epochs=50, validation_split=0.2, callbacks=[early_stopping])

acc = history.history["acc"]
val_acc = history.history["val_acc"]
loss = history.history["loss"]
val_loss = history.history["val_loss"]

epochs = range(1, len(acc) + 1)

plt.plot(epochs, acc, "bo", label="Training acc")
plt.plot(epochs, val_acc, "b", label="Validation acc")
plt.title("Training and Validation accuracy")
plt.legend()

plt.figure()

plt.plot(epochs, loss, "bo", label="Training loss")
plt.plot(epochs, val_loss, "b", label="Validation loss")
plt.title("Training and Validation loss")
plt.legend()

plt.show()
