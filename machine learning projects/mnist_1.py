# -*- coding: utf-8 -*-
"""MNIST-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NQYOxwpfryT2vQMaocwYYvT7KftV8Rmg

First we're going to import the MNIST dataset, which consists of greyscale, handwritten digits (28 x 28 pixels). In Keras, the dataset comes preloaded as numpy arrays.
"""

from keras.datasets import mnist

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

"""Printing the shape of each array shows that we have 60000 28 x 28 images in the training dataset and 10000 images in the testing dataset. The labels contain the numbers each image corresponds to"""

print(train_images.shape)
print(test_images.shape)

print(train_labels)
print(test_labels)

"""Next we actually need to create the neural network by stacking densely connected layers on top of each other. We specify the shape of the input the first layer will take and each layer needs to have an activation function."""

from keras import models, layers

model = models.Sequential()
model.add(layers.Dense(512, activation="relu", input_shape=(28 * 28,)))
model.add(layers.Dense(10, activation="softmax"))

"""Next we need to compile the model, selecting a loss function, optimiser and metrics to monitor during training and testing"""

model.compile(optimizer="rmsprop", loss="categorical_crossentropy", metrics=["accuracy"])

"""The data needs to be preproccessed into a form that is easier for the network to understand. The labels also need to be categorically encoded (each category is changed into a numerical feature)"""

train_images = train_images.reshape((60000, 28 * 28))
train_images = train_images.astype("float32") / 255

test_images = test_images.reshape((10000, 28 * 28))
test_images = test_images.astype("float32") / 255

from keras.utils import to_categorical
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

"""Finally we can train the network using the fit method, specifying the data we wish to train the network on and how long we want to train it for."""

model.fit(train_images, train_labels, epochs = 5, batch_size=128)

"""We should also see how well the network does on the test data. Always test the model on data it hasnt seen before"""

test_loss, test_acc = model.evaluate(test_images, test_labels)
print(test_acc)
